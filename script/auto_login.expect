#!/usr/bin/expect -f
#
#    auto_login.exp,
#
#         多功能expect脚本,支持交互登录/SSH测试以及远程命令执行功能 
#
#    Created by Ruoyan Wong on 2012/12/10.


# 解析参数,存入数组中.
for {set x 0} {$x<$argc} {incr x 2} {
    set opt [lindex $argv $x]
    set nexts [expr {$x + 1}]
    switch -glob $opt {
        "u" { set config(user)    [lindex $argv $nexts] }
        "p" { set config(port)    [lindex $argv $nexts] }
        "c" { set config(script)  [lindex $argv $nexts] }
        "i" { set config(secret)  [lindex $argv $nexts] }
        "s" { set config(shadow)  [lindex $argv $nexts] }
        "a" { set config(address) [lindex $argv $nexts] }
        "d" { set config(logdir)  [lindex $argv $nexts] }
        "t" { set config(time)    [lindex $argv $nexts] }
        "o" { set config(operate) [lindex $argv $nexts] }
        default {incr x -1}
    }
    if { [expr {$nexts + 1}] > $argc } break 
}

# define script help.
set help "Usage: auto_login.expect \[arguments\]: \n
required arguments:
    o  OPERATE operate type, (support: run, test, interact)
    a  ADDRESS server address
    d  LOGDIR  syslog directory
optional arguments:
    u  USER    user
    p  PORT    port
    c  SCRIPT  execute command file
    i  SECRET  user identity file
    s  SHADOW  password file
    t  TIMEOUT expect build-in timeouts"

# 执行参数检查操作,异常情况打印帮助文档并退出
if { $argc==1 && [lindex $argv 0]=="help" } {
    puts stderr $help
    exit
} elseif { ![info exists config(address)] } {
    puts stderr "Error parameters: -a"
    puts $help
    exit
} elseif { ![info exists config(logdir)] || ![file exists $config(logdir)] } { 
    puts stderr "Error parameters: -d"
    puts $help
    exit
} elseif { ![info exists config(operate)] || ($config(operate) != "run" && $config(operate) != "test" && $config(operate) != "interact") } {
    puts stderr "Error parameters: -o"
    puts $help
    exit
} elseif { $config(operate) == "run" && ![file exists $config(script)]} {
    puts stderr "Error parameters: -o"
    puts $help
    exit
} elseif { [info exists config(secret)] && ![file exists $config(secret)] } { 
    puts stderr "Error parameters: -i"
    puts $help
    exit
}


# silly globals
log_user 0
set PROMPT "(%|>|#|\\\$) $"

# define expect build-in timeout
if { [info exists config(time)] } {
    set timeout $config(time)
}

# read password from shadow file. otherwise define an empty array.
if { [info exists config(shadow)] && [file exists $config(shadow)] } { 
    set count 0
    set file [open $config(shadow) r]
    while { [ gets $file oneline ]>=0 } { 
        set password($count) $oneline
        incr count
    }   
    close $file
} else {
    array set password []
}

# 打开待执行命令列表的文件句柄
if { $config(operate) == "run" } { 
    set file [open $config(script) r]
} 

# 根据用户传递参数设定ssh命令
set COMMAND "ssh -o StrictHostKeyChecking=no -o GSSAPIAuthentication=no -o VerifyHostKeyDNS=no"
foreach {key value} [array get config] {
    if {$key == "user"} { 
        append COMMAND " " "-l $value" 
    } elseif {$key == "port"} { 
        append COMMAND " " "-p $value"
    } elseif {$key == "secret"} {
        append COMMAND " " "-i $value"
    }   
}

set count 0
# 使用{*}关闭spawn的参数异常情况
spawn {*}$COMMAND $config(address)
expect {
    # 匹配到"Permission denied"关键字自动将密码跳转到下一条记录，主要目的为可自动尝试多个密码。
    "Permission denied" {
        incr count
        exp_continue
    }
    "*?assword:*" {
    # 从密码数组中获取当前密码，当密码不存在时表示密码尝试失败，退出。
        if [info exists password($count)] {
            send "$password($count)\r"
            exp_continue
        } else {
            # fuck! Match authentication failed!
            set status "nopasswd"
            if { $config(operate) == "run" } {
                set file [open $config(logdir)/$config(address).txt a]
                puts $file $status
            } elseif { $config(operate) == "test" } {
                set file [open $config(logdir)/$status.stat a]
                puts $file "$config(address)"
            } elseif { $config(operate) == "interact" } {
                set file [open $config(logdir)/interact.stat w]
                #puts $file "Authentication failed!"
                puts stderr "Authentication failed!"
            }
            close $file
            exit
        }
    }
    "No route to host" {
        set status "noroute"
    }
    "Connection refused" {
        set status "refused"
    }
    "Connection closed" {
        set status "closed"
    }
    "Connection reset" {
        set status "reset"
    }
    "Connection timed out" {
        set status "timeout"
    }
    -re "$PROMPT" {
        set status "success" 
        if { $config(operate) == "run" } {
            while { [ gets $file CMD ]>=0 } { 
                send -- "$CMD\n"
            } 
            send -- "exit\n"
        } elseif { $config(operate) == "test" }  {
            send -- "exit\n"
        } elseif { $config(operate) == "interact" } {
            set file [open $config(logdir)/interact.stat w]
            #puts $file "Node login success!"
            puts stderr "Node login success!"
            #close $file
            interact
            exit
        } 
    }
    timeout {
        set status "timeout"
        # haha! Match expect build-in timeout.
        if { $config(operate) == "run" } {
            set file [open $config(logdir)/$config(address).txt a]
            puts $file $status
        } elseif { $config(operate) == "test" }  {
            set file [open $config(logdir)/$status.stat a]
            puts $file "$config(address)"
        } elseif { $config(operate) == "interact" }  {
            set file [open $config(logdir)/interact.stat w]
            puts $file "Trigger expect timeout"
        }
        close $file
        exit
    }
}

# ha! Match all nomal expect eof.
expect eof {
    if { $config(operate) == "run" } {
        set file [open $config(logdir)/$config(address).txt a]
        if { $status == "success" } {
            puts $file "$expect_out(buffer)"
        } else {
            puts $file $status
        }
    } elseif { $config(operate) == "test" }  {
        set file [open $config(logdir)/$status.stat a]
        puts $file "$config(address)"
    } elseif { $config(operate) == "interact" }  {
        set file [open $config(logdir)/interact.stat w]
        puts $file "Trigger exception: $status"
        close $file
    }
    if { [info exists file1] } { close $file }
    exit
}
