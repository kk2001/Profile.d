#!/usr/bin/expect -f

# 常量设定
set timeout 30
set PROMPT "(%|>|#|\\\$) $"

# 根据用于调用auto_login.expect命令的别名设定部分参数的默认值。
switch -regexp $argv0 {
    ssh.ku { 
        set info(port)   "22" 
        set info(user)   "root"
        set info(secret) "$env(HOME)/.ssh/id_rsa.ku"
        set info(shadow) "$env(HOME)/.ssh/password.ku"
    }
}

# 解析参数，存入info数组中
if { $argc>=2 } {
    for {set x 0} {$x<$argc} {incr x 2} {
        set opt [lindex $argv $x]
        set nexts [expr {$x + 1}]
        switch -glob $opt {
            "-u" { set info(user)    [lindex $argv $nexts] }
            "-p" { set info(port)    [lindex $argv $nexts] }
            "-i" { set info(secret)  [lindex $argv $nexts] }
            "-s" { set info(shadow)  [lindex $argv $nexts] }
            "-h" { set info(address) [lindex $argv $nexts] }
        }
        if { [expr {$nexts + 1}] > $argc } break 
    }
} elseif { $argc==1 } {
    set info(address) [lindex $argv 0]
}

# 判断参数传入是否符合要求，如无address参数传入则打印usage帮助并退出
if { ![info exists info(address)] } {
    puts "usage: "
    puts "  $argv0 \[-u name\] \[-p port\] \[-i identity\] \[-h address\] \[-s shadow\]"
    exit
}

# 从shadow文件中读取用户密码
if { [info exists info(shadow)] && [file exists info(shadow)] } {
    set count 0
    set file [open $info(shadow) r]
    while { [ gets $file oneline ]>=0 } {
        set password($count) $oneline
        incr count
    } 
    close $file
} else {
    array set password []
}

# 根据用户传递参数设定ssh命令
set parameters "ssh -o StrictHostKeyChecking=no -o GSSAPIAuthentication=no -o VerifyHostKeyDNS=no"
foreach {key value} [array get info] {
    if {$key == "user"} { 
        append parameters " " "-l $value" 
    } elseif {$key == "port"} { 
        append parameters " " "-p $value"
    } elseif {$key == "secret"} {
        append parameters " " "-i $value"
    }   
}

# 使用{*}关闭spawn的参数异常情况
spawn {*}$parameters $info(address)

set count 0
expect {
    # 匹配到"Permission denied"关键字自动将密码跳转到下一条记录，主要目的为可自动尝试多个密码。
	"Permission denied" {
        incr count
        exp_continue
    }
    "*?assword:*" {
    # 从密码数组中获取当前密码，当密码不存在时表示密码尝试失败，退出。
        if [info exists password($count)] {
            puts "\n -> Use $password($count) try."
            send "$password($count)\r"
            exp_continue
        } else {
            puts "\n -> Authentication failed, quit."
            exit
        }
    }
    -re "$PROMPT" {
        interact
    }
    timeout { 
        puts "\n -> Connection timeout, quit."
        exit
    }
}
