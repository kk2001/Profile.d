#!/usr/bin/expect -f

# 常量设定
set timeout 45
set PROMPT "(%|>|#|\\\$) $"
set LOGDIR "$env(HOME)/logging"

# 解析参数,存入数组中.
if { $argc>=2 } {
    for {set x 0} {$x<$argc} {incr x 2} {
        set opt [lindex $argv $x]
        set nexts [expr {$x + 1}]
        switch -glob $opt {
            "u" { set config(user)    [lindex $argv $nexts] }
            "p" { set config(port)    [lindex $argv $nexts] }
            "e" { set config(script)  [lindex $argv $nexts] }
            "i" { set config(secret)  [lindex $argv $nexts] }
            "s" { set config(shadow)  [lindex $argv $nexts] }
            "h" { set config(address) [lindex $argv $nexts] }
            "l" { set config(log)     [lindex $argv $nexts] }
            "t" { set config(type)    [lindex $argv $nexts] }
        }
        if { [expr {$nexts + 1}] > $argc } break 
    }
}

# 从shadow中读取密码存入数组中,如文件不存在则初始化空数组.
if { [info exists config(shadow)] && [file exists config(shadow)] } { 
    set count 0
    set file [open $config(shadow) r]
    while { [ gets $file oneline ]>=0 } { 
        set password($count) $oneline
        incr count
    }   
    close $file
} else {
    array set password []
}

# 根据用户传递参数设定ssh命令
set ssh "ssh -o StrictHostKeyChecking=no -o GSSAPIAuthentication=no -o VerifyHostKeyDNS=no"
foreach {key value} [array get config] {
    if {$key == "user"} { 
        append ssh " " "-l $value" 
    } elseif {$key == "port"} { 
        append ssh " " "-p $value"
    } elseif {$key == "secret"} {
        append ssh " " "-i $value"
    }   
}
set count 0
if { [info exists config(type)] && $config(type) == "run" } { 
    set file [open $config(script) r]
}

# 使用{*}关闭spawn的参数异常情况
spawn {*}$ssh $config(address)

expect {
    # 匹配到"Permission denied"关键字自动将密码跳转到下一条记录，主要目的为可自动尝试多个密码。
    "Permission denied" {
        incr count
        exp_continue
    }
    "*?assword:*" {
    # 从密码数组中获取当前密码，当密码不存在时表示密码尝试失败，退出。
        if [info exists password($count)] {
            send "$password($count)\r"
            exp_continue
        } else {
            set status "nopasswd"
            exit
        }
    }
    "No route to host" {
        set status "noroute"
        exit
    }
    "Connection refused" {
        set status "refused"
        exit
    }
    "Connection closed" {
        set status "closed"
        exit
    }
    "Connection reset" {
        set status "reset"
        exit
    }
    "Connection timed out" {
        set status "timeout"
        exit
    }
    -re "$PROMPT" {
        set status "success" 
        if { $config(type) == "run" } {
            while { [ gets $file CMD ]>=0 } { 
                send -- "$CMD\n"
            } 
        } elseif { $config(type) == "test" }  {
            exit
        } elseif { $config(type) == "interact" } {
            interact
        } 
    }
    timeout {
        set status "timeout"
        exit
    }
    eof
}

if { [info exists file] } {
    close $file
}

if { $config(type) != "interact"} {
    expect eof
}

puts $status.stat
