#!/usr/bin/expect -f

# 常量设定
set timeout 45
set PROMPT "(%|>|#|\\\$) $"
set LOGDIR "$env(HOME)/logging"

# 解析参数,存入数组中.
if { $argc>=2 } {
    for {set x 0} {$x<$argc} {incr x 2} {
        set opt [lindex $argv $x]
        set nexts [expr {$x + 1}]
        switch -glob $opt {
            "u" { set info(user)    [lindex $argv $nexts] }
            "p" { set info(port)    [lindex $argv $nexts] }
            "e" { set info(script)  [lindex $argv $nexts] }
            "i" { set info(secret)  [lindex $argv $nexts] }
            "s" { set info(shadow)  [lindex $argv $nexts] }
            "h" { set info(address) [lindex $argv $nexts] }
        }
        if { [expr {$nexts + 1}] > $argc } break 
    }
}

# 从shadow中读取密码存入数组中,如文件不存在则初始化空数组.
if { [info exists info(shadow)] && [file exists info(shadow)] } { 
    set count 0
    set file [open $info(shadow) r]
    while { [ gets $file oneline ]>=0 } { 
        set password($count) $oneline
        incr count
    }   
    close $file
} else {
    array set password []
}

# 根据用户传递参数设定ssh命令
set parameters "ssh -o StrictHostKeyChecking=no -o GSSAPIAuthentication=no -o VerifyHostKeyDNS=no"
foreach {key value} [array get info] {
    if {$key == "user"} { 
        append parameters " " "-l $value" 
    } elseif {$key == "port"} { 
        append parameters " " "-p $value"
    } elseif {$key == "secret"} {
        append parameters " " "-i $value"
    }   
}

# 使用{*}关闭spawn的参数异常情况
spawn {*}$parameters $info(address)

set count 0
set file [open $info(script) r]
expect {
    # 匹配到"Permission denied"关键字自动将密码跳转到下一条记录，主要目的为可自动尝试多个密码。
    "Permission denied" {
        incr count
        exp_continue
    }
    "*?assword:*" {
    # 从密码数组中获取当前密码，当密码不存在时表示密码尝试失败，退出。
        if [info exists password($count)] {
            send "$password($count)\r"
            exp_continue
        } else {
            log_file $LOGDIR/$info(address).txt
            send_user "$info(address)\n"
            exit
        }
    }
    "No route to host" {
        log_file $LOGDIR/$info(address).txt
        send_user "noroute\n"
        exit
    }
    "Connection refused" {
        log_file $LOGDIR/$info(address).txt
        send_user "refused\n"
        exit
    }
    "Connection closed" {
        log_file $LOGDIR/$info(address).txt
        send_user "closed\n"
        exit
    }
    "Connection reset" {
        log_file $LOGDIR/$info(address).txt
        send_user "reset\n"
        exit
    }
    "Connection timed out" {
        log_file $LOGDIR/$info(address).txt
        send_user "timeout\n"
        exit
    }
    -re "$PROMPT" {
        log_file $LOGDIR/$info(address).txt
        while { [ gets $file CMD ]>=0 } { 
            send -- "$CMD\n"
        } 
    }
    timeout {
        log_file $LOGDIR/$info(address).txt
        send_user "timeout\n"
        exit
    }
}

close $file
expect eof
